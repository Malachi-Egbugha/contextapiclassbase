{"version":3,"sources":["contexts/ThemeContext.js","contexts/AuthContext.js","components/Navbar.js","components/BookList.js","components/ThemeToggle.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toggleTheme","setState","Provider","value","this","props","children","Component","AuthContext","AuthContextProvider","isAuthenticated","toggleAuth","Navbar","Consumer","auuthContext","themeContext","isLight","theme","style","background","color","onClick","BookList","context","className","contextType","ThemeToggle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNACaA,EAAeC,0BAmBbC,E,4MAjBXC,MAAQ,CACJC,cAAc,EACdC,MAAM,CAACC,OAAQ,OAAQC,GAAI,OAAQC,GAAI,QACvCC,KAAM,CAACH,OAAQ,OAAQC,GAAI,OAAQC,GAAG,S,EAE1CE,YAAa,WACV,EAAKC,SAAS,CAACP,cAAe,EAAKD,MAAMC,gB,uDAGxC,OACI,kBAACJ,EAAaY,SAAd,CAAuBC,MAAK,eAAMC,KAAKX,MAAX,CAAkBO,YAAaI,KAAKJ,eAC/DI,KAAKC,MAAMC,c,GAZWC,aCAtBC,EAAcjB,0BAiBZkB,E,4MAfXhB,MAAQ,CACJiB,iBAAiB,G,EAEpBC,WAAY,WACR,EAAKV,SAAS,CAACS,iBAAkB,EAAKjB,MAAMiB,mB,uDAG7C,OACI,kBAACF,EAAYN,SAAb,CAAsBC,MAAK,eAAMC,KAAKX,MAAX,CAAkBkB,WAAYP,KAAKO,cACzDP,KAAKC,MAAMC,c,GAVMC,aCoCnBK,E,uKA/BP,OACI,kBAACJ,EAAYK,SAAb,MAAuB,SAACC,GAAD,OACnB,kBAACxB,EAAauB,SAAd,MAAwB,SAACE,GAAkB,IAChCL,EAA8BI,EAA9BJ,gBAAiBC,EAAaG,EAAbH,WACjBK,EAAsBD,EAAtBC,QAAQrB,EAAcoB,EAAdpB,MAAOI,EAAOgB,EAAPhB,KAChBkB,EAAQD,EAASrB,EAAMI,EAC7B,OACI,yBAAKmB,MAAO,CAACC,WAAYF,EAAMpB,GAAIuB,MAAOH,EAAMrB,SAChD,2CACA,yBAAKyB,QAASV,GACTD,EAAkB,YAAa,WAEpC,4BACI,oCACA,qCACA,mD,GApBPH,aCDfe,E,uKAEQ,IAAD,EAC+BlB,KAAKmB,QAAlC7B,EADF,EACEA,aAAcC,EADhB,EACgBA,MAAOI,EADvB,EACuBA,KAC1BkB,EAAQvB,EAAeC,EAAQI,EACjC,OACI,yBAAKyB,UAAU,YAAaN,MAAQ,CAAEC,WAAYF,EAAMnB,GAAIsB,MAAOH,EAAMrB,SACrE,4BACI,wBAAIsB,MAAO,CAACC,WAAYF,EAAMpB,KAA9B,oBACA,wBAAIqB,MAAO,CAACC,WAAYF,EAAMpB,KAA9B,wBACA,wBAAIqB,MAAO,CAACC,WAAYF,EAAMpB,KAA9B,0B,GAVGU,aAAjBe,EACKG,YAAcnC,EAgBVgC,QCjBTI,E,uKAEI,IACD1B,EAAeI,KAAKmB,QAApBvB,YACP,OACC,4BAAQqB,QAASrB,GAAjB,wB,GALuBO,aAApBmB,EACED,YAAcnC,EASPoC,QCUAC,MAdf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,KACF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCHcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.36f68cc6.chunk.js","sourcesContent":["import React, {createContext, Component } from 'react';\r\nexport const ThemeContext = createContext();\r\nclass ThemeContextProvider extends Component {\r\n    state = {  \r\n        isLightTheme: true,\r\n        light:{syntax: '#555', ui: '#ddd', bg: '#eee'},\r\n        dark: {syntax: '#ddd', ui: '#333', bg:'#555'}\r\n    }\r\n    toggleTheme =() =>{\r\n       this.setState({isLightTheme: !this.state.isLightTheme });\r\n    }\r\n    render() { \r\n        return ( \r\n            <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\r\n            {this.props.children}          \r\n            </ThemeContext.Provider>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ThemeContextProvider;","import React, {Component, createContext} from 'react';\r\nimport { ThemeContext } from './ThemeContext';\r\nexport const AuthContext = createContext();\r\nclass AuthContextProvider extends Component {\r\n    state = { \r\n        isAuthenticated: false\r\n     }\r\n     toggleAuth= () =>{\r\n         this.setState({isAuthenticated: !this.state.isAuthenticated});\r\n     }\r\n    render() { \r\n        return ( \r\n            <AuthContext.Provider value={{...this.state, toggleAuth: this.toggleAuth}}>\r\n                {this.props.children}\r\n            </AuthContext.Provider>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AuthContextProvider;","import React, {Component} from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport {ThemeContext} from '../contexts/ThemeContext'; \r\nclass Navbar extends Component {\r\n    //const value = useContext(ThemeContext);\r\n    //static contextType = ThemeContext;\r\n    render(){\r\n      //  console.log(this.context);\r\n        return(\r\n            <AuthContext.Consumer>{(auuthContext) =>(\r\n                <ThemeContext.Consumer>{(themeContext) => {\r\n                    const {isAuthenticated, toggleAuth} =auuthContext;  \r\n                    const {isLight,light, dark} =themeContext;\r\n                    const theme = isLight? light:dark;\r\n                    return(\r\n                        <nav style={{background: theme.ui, color: theme.syntax}}>\r\n                        <h1>Context App</h1>\r\n                        <div onClick={toggleAuth}>\r\n                            {isAuthenticated ? 'Logout in': 'Log out'}\r\n                        </div>\r\n                        <ul>\r\n                            <li>Home</li>\r\n                            <li>About</li>\r\n                            <li>Contact</li>\r\n                            \r\n        \r\n                            \r\n                        </ul>\r\n                    </nav>\r\n                    )\r\n                }}</ThemeContext.Consumer>\r\n\r\n            )}\r\n            \r\n            </AuthContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext'; \r\nclass BookList extends Component {\r\n    static contextType = ThemeContext;\r\n    render() { \r\n        const {isLightTheme, light, dark} = this.context;\r\n    const theme = isLightTheme ? light : dark;\r\n        return ( \r\n            <div className='book-list'  style ={{ background: theme.bg, color: theme.syntax}}>\r\n                <ul>\r\n                    <li style={{background: theme.ui}}>the way of kings</li>\r\n                    <li style={{background: theme.ui}}>the name of the wind</li>\r\n                    <li style={{background: theme.ui}}>the final empire</li>\r\n                </ul>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default BookList;","import React, {Component} from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\nclass ThemeToggle extends Component{\r\n\tstatic contextType = ThemeContext;\r\n\trender(){\r\n\t\tconst {toggleTheme} = this.context;\r\n\t\treturn(\r\n\t\t\t<button onClick={toggleTheme}>Toggle the theme</button>\r\n\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default ThemeToggle;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport AuthContextProvider from './contexts/AuthContext';\nimport ThemeToggle from './components/ThemeToggle';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <AuthContextProvider>\n      <Navbar/>\n      <BookList/>\n      <ThemeToggle/>\n      </AuthContextProvider>\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}